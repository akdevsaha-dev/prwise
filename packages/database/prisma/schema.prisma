// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  firstLogin    Boolean     @default(true)
  workspaces    Workspace[]
  plan          Plan        @default(FREE)

  @@unique([email])
  @@map("user")
}

enum Plan {
  FREE
  PAID
}

model Workspace {
  id                    String                 @id @default(uuid())
  name                  String
  slug                  String                 @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  ownerId               String
  owner                 User                   @relation(fields: [ownerId], references: [id])
  githubAppInstallation GithubAppInstallation?
  PullRequest           PullRequest[]
  pullRequestId         String?

  @@unique([ownerId, name])
  @@map("workspace")
}

model GithubAppInstallation {
  id             String    @id @default(uuid())
  installationId String    @unique
  accountLogin   String    @default("unknown")
  accountType    String    @default("User")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  workspaceId    String    @unique
  Workspace      Workspace @relation(fields: [workspaceId], references: [id])
}

model PullRequest {
  id            String    @id @default(uuid())
  pullReqNumber Int
  title         String
  description   String?
  branch        String
  baseBranch    String
  repoName      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
